version: '3.9'
services:
  #keycloak
  gzac-keycloak:
      container_name: gzac-keycloak
      depends_on:
          - gzac-keycloak-database
      image: quay.io/keycloak/keycloak:17.0.1-legacy
      ports:
          - "8081:8080"
      environment:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
          DB_VENDOR: postgres
          DB_ADDR: gzac-keycloak-database
          DB_USER: keycloak
          DB_PASSWORD: keycloak
      volumes:
          - ./imports/keycloak:/opt/jboss/keycloak/imports
      command:
          - "-Dkeycloak.migration.action=import"
          - "-Dkeycloak.migration.provider=singleFile"
          - "-Dkeycloak.migration.file=/opt/jboss/keycloak/imports/realm.json"
          - "-Dkeycloak.migration.strategy=IGNORE_EXISTING"
  gzac-keycloak-database:
      image: postgres:14.1
      container_name: gzac-keycloak-database
      environment:
          POSTGRES_USER: keycloak
          POSTGRES_PASSWORD: keycloak

  #GZAC database
  gzac-database:
      container_name: gzac-database
      image: postgres:14.1
      ports:
          - "54320:5432"
      environment:
          POSTGRES_USER: gzac
          POSTGRES_PASSWORD: password
          POSTGRES_DB: gzac
      volumes:
          - gzac-database-data:/var/lib/postgres # persist data even if container shuts down

  #zgw
  openzaak:
      image: openzaak/open-zaak:1.8.2
      container_name: openzaak
      platform: linux/amd64
      profiles:
          - zgw
          - openzaak
      environment:
          - DB_HOST=openzaak-database
          - DB_POST=5433
          - SECRET_KEY=veryRestrictedSecretKey
          - DB_USER=openzaak
          - DB_PASSWORD=openzaak
          - DB_NAME=openzaak
          - CACHE_DEFAULT=redis:6379/0
          - CACHE_AXES=redis:6379/0
          - DEBUG=true
          - ALLOWED_HOSTS=localhost,host.docker.internal,172.17.0.1,openzaak
          - OPENZAAK_SUPERUSER_USERNAME=admin
          - OPENZAAK_SUPERUSER_EMAIL=admin@admin.org
          - DJANGO_SUPERUSER_PASSWORD=admin
          - SENDFILE_BACKEND=django_sendfile.backends.simple
          - NOTIFICATIONS_DISABLED=true
      ports:
          - "8001:8000"
      depends_on:
          -   openzaak-database
          -   redis

  openzaak-database:
      image: mdillon/postgis:11
      container_name: openzaak-database
      platform: linux/amd64
      profiles:
          - zgw
          - openzaak
      environment:
          - POSTGRES_USER=openzaak
          - POSTGRES_PASSWORD=openzaak
          - POSTGRES_DB=openzaak
      volumes:
          - ./imports/open-zaak:/docker-entrypoint-initdb.d

  redis:
      image: redis:6.2.6
      container_name: redis
      profiles:
          - zgw
          - openzaak

  objecten-api:
      image: maykinmedia/objects-api:2.1.1
      container_name: objecten-api
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      ports:
          - "8010:8000"
      environment: &objects-env
          - CORS_ALLOW_ALL_ORIGINS=true
          - SECRET_KEY=${SECRET_KEY:-1(@f(-6s_u(5fd&1sg^uvu2s(c-9sapw)1era8q&)g)h@cwxxg}
          - DJANGO_SETTINGS_MODULE=objects.conf.docker
          - DB_HOST=objecten-api-database
          - DEBUG=true
          - TWO_FACTOR_FORCE_OTP_ADMIN=False # this is not available yet in this version
          - TWO_FACTOR_PATCH_ADMIN=False
      depends_on:
          - objecten-api-database

  objecten-api-database:
      image: postgis/postgis:13-3.1
      container_name: objecten-api-database
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      environment:
          - POSTGRES_USER=objects
          - POSTGRES_PASSWORD=objects
          - POSTGRES_DB=objects

  objecten-api-import:
      image: maykinmedia/objects-api:2.1.1
      container_name: objects-api-import
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      environment: *objects-env
      # in the current version of django it is not possible to create a new user with password without user interaction by using the createsuperuser command
      command: sh init/init.sh
      volumes:
          - ./imports/objects-api/fixtures:/app/src/objects/fixtures
          - ./imports/objects-api/init:/app/init
      depends_on:
          - objecten-api

  objecttypen-api:
      image: maykinmedia/objecttypes-api:2.1.0
      container_name: objecttypen-api
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      ports:
          - "8011:8000"
      environment: &objecttypes-env
          - CORS_ALLOW_ALL_ORIGINS=true
          - SECRET_KEY=${SECRET_KEY:-fgv=c0hz&tl*8*3m3893@m+1pstrvidc9e^5@fpspmg%cy$$15d}
          - DJANGO_SETTINGS_MODULE=objecttypes.conf.docker
          - DB_HOST=objecttypen-api-database
          - DEBUG=true
          - TWO_FACTOR_FORCE_OTP_ADMIN=False # this is not available yet in this version
          - TWO_FACTOR_PATCH_ADMIN=False
      depends_on:
          - objecttypen-api-database

  objecttypen-api-database:
        image: postgres:14.1
        container_name: objecttypen-api-database
        profiles:
            - zgw
            - objecten
        environment:
            - POSTGRES_USER=objecttypes
            - POSTGRES_PASSWORD=objecttypes
            - POSTGRES_DB=objecttypes


  objecttypen-api-import:
      image: maykinmedia/objecttypes-api:2.1.0
      container_name: objecttypen-api-import
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      environment: *objecttypes-env
      command: sh init/init.sh
      volumes:
          - ./imports/objecttypes-api/fixtures:/app/src/objecttypes/fixtures
          - ./imports/objecttypes-api/init:/app/init
      depends_on:
          - objecttypen-api

volumes:
  gzac-database-data:
