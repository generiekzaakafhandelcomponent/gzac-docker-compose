services:
  # GZAC core

  gzac-keycloak:
      container_name: gzac-keycloak
      depends_on:
          - gzac-keycloak-database
      image: quay.io/keycloak/keycloak:24.0.1
      ports:
          - "8081:8080"
      environment:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
          KC_DB: postgres
          KC_DB_URL: jdbc:postgresql://gzac-keycloak-database/keycloak
          KC_DB_USERNAME: keycloak
          KC_DB_PASSWORD: keycloak
          KC_FEATURES: token-exchange,admin-fine-grained-authz
          KC_HTTP_RELATIVE_PATH: /auth
      volumes:
          - ./imports/keycloak:/opt/keycloak/data/import
      command: "start-dev --import-realm"
  gzac-keycloak-database:
      image: postgres:14.1
      container_name: gzac-keycloak-database
      ports:
          - "54329:5432"
      environment:
          POSTGRES_USER: keycloak
          POSTGRES_PASSWORD: keycloak

  gzac-database:
      container_name: gzac-database
      image: postgres:14.1
      ports:
          - "54320:5432"
      environment:
          POSTGRES_USER: gzac
          POSTGRES_PASSWORD: password
          POSTGRES_DB: gzac
      volumes:
          - gzac-database-data:/var/lib/postgres # persist data even if container shuts down

  gzac-database-mysql:
      container_name: gzac-database-mysql
      image: mysql/mysql-server:8.0.28-1.2.7-server
      ports:
          - "33060:3306"
      environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: gzac
          MYSQL_USER: gzac
          MYSQL_PASSWORD: password
          MYSQL_ROOT_HOST: "%"
      command: [
          "--default-authentication-plugin=mysql_native_password",
          "--lower_case_table_names=1",
          "--collation-server=utf8mb4_unicode_ci",
          "--character-set-server=utf8mb4",
          "--explicit_defaults_for_timestamp",
          "--ssl=false",
          "--innodb_flush_method=O_DIRECT",
          "--sql_mode=NO_ENGINE_SUBSTITUTION"
      ]
      volumes:
          - gzac-database-data-mysql:/var/lib/mysql # persist data even if container shuts down

  gzac-rabbitmq:
      image: rabbitmq:3-management
      container_name: gzac-rabbitmq
      volumes:
          - ./imports/gzac-rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
          - ./imports/gzac-rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      ports:
          - "5672:5672"
          - "15672:15672"

  # ZGW

  openzaak:
      image: openzaak/open-zaak:1.11.0
      container_name: openzaak
      platform: linux/amd64
      profiles:
          - zgw
          - openzaak
      environment:
          - DB_HOST=openzaak-database
          - DB_POST=5433
          - SECRET_KEY=veryRestrictedSecretKey
          - DB_USER=openzaak
          - DB_PASSWORD=openzaak
          - DB_NAME=openzaak
          - CACHE_DEFAULT=openzaak-redis:6379/0
          - CACHE_AXES=openzaak-redis:6379/0
          - DEBUG=true
          - ALLOWED_HOSTS=localhost,host.docker.internal,172.17.0.1,openzaak
          - OPENZAAK_SUPERUSER_USERNAME=admin
          - OPENZAAK_SUPERUSER_EMAIL=admin@admin.org
          - DJANGO_SUPERUSER_PASSWORD=admin
          - SENDFILE_BACKEND=django_sendfile.backends.simple
          - NOTIFICATIONS_DISABLED=true
      ports:
          - "8001:8000"
      depends_on:
          -   openzaak-database
          -   openzaak-redis

  openzaak-database:
      image: mdillon/postgis:11
      container_name: openzaak-database
      platform: linux/amd64
      profiles:
          - zgw
          - openzaak
      environment:
          - POSTGRES_USER=openzaak
          - POSTGRES_PASSWORD=openzaak
          - POSTGRES_DB=openzaak
      ports:
          - "5433:5432"
      volumes:
          - ./imports/open-zaak:/docker-entrypoint-initdb.d

  openzaak-redis:
      image: redis:6.2.6
      container_name: openzaak-redis
      profiles:
          - zgw
          - openzaak

  objecten-api:
      image: maykinmedia/objects-api:2.1.1
      container_name: objecten-api
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      ports:
          - "8010:8000"
      environment: &objects-env
          - CORS_ALLOW_ALL_ORIGINS=true
          - SECRET_KEY=${SECRET_KEY:-1(@f(-6s_u(5fd&1sg^uvu2s(c-9sapw)1era8q&)g)h@cwxxg}
          - DJANGO_SETTINGS_MODULE=objects.conf.docker
          - DB_HOST=objecten-api-database
          - DEBUG=true
          - TWO_FACTOR_FORCE_OTP_ADMIN=False # this is not available yet in this version
          - TWO_FACTOR_PATCH_ADMIN=False
      depends_on:
          - objecten-api-database

  objecten-api-database:
      image: postgis/postgis:13-3.1
      container_name: objecten-api-database
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      ports:
          - "54321:5432"
      environment:
          - POSTGRES_USER=objects
          - POSTGRES_PASSWORD=objects
          - POSTGRES_DB=objects

  objecten-api-import:
      image: maykinmedia/objects-api:2.1.1
      container_name: objects-api-import
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      environment: *objects-env
      # in the current version of django it is not possible to create a new user with password without user interaction by using the createsuperuser command
      command: sh init/init.sh
      volumes:
          - ./imports/objects-api/fixtures:/app/src/objects/fixtures
          - ./imports/objects-api/init:/app/init
      depends_on:
          - objecten-api

  objecttypen-api:
      image: maykinmedia/objecttypes-api:2.1.0
      container_name: objecttypen-api
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      ports:
          - "8011:8000"
      environment: &objecttypes-env
          - CORS_ALLOW_ALL_ORIGINS=true
          - SECRET_KEY=${SECRET_KEY:-fgv=c0hz&tl*8*3m3893@m+1pstrvidc9e^5@fpspmg%cy$$15d}
          - DJANGO_SETTINGS_MODULE=objecttypes.conf.docker
          - DB_HOST=objecttypen-api-database
          - DEBUG=true
          - TWO_FACTOR_FORCE_OTP_ADMIN=False # this is not available yet in this version
          - TWO_FACTOR_PATCH_ADMIN=False
      depends_on:
          - objecttypen-api-database

  objecttypen-api-database:
      image: postgres:14.1
      container_name: objecttypen-api-database
      profiles:
          - zgw
          - objecten
      ports:
          - "54324:5432"
      environment:
          - POSTGRES_USER=objecttypes
          - POSTGRES_PASSWORD=objecttypes
          - POSTGRES_DB=objecttypes

  objecttypen-api-import:
      image: maykinmedia/objecttypes-api:2.1.0
      container_name: objecttypen-api-import
      platform: linux/amd64
      profiles:
          - zgw
          - objecten
      environment: *objecttypes-env
      command: sh init/init.sh
      volumes:
          - ./imports/objecttypes-api/fixtures:/app/src/objecttypes/fixtures
          - ./imports/objecttypes-api/init:/app/init
      depends_on:
          - objecttypen-api

  open-notificaties-rabbitmq:
      image: rabbitmq:3.9-management
      container_name: open-notificaties-rabbitmq
      profiles:
          - zgw
      ports:
          - "5673:5672"
          - "15673:15672"

  open-notificaties-celery:
      image: openzaak/open-notificaties:1.4.3
      container_name: open-notificaties
      platform: linux/amd64
      profiles:
          - zgw
      environment: &notificaties-env
          - DJANGO_SETTINGS_MODULE=nrc.conf.docker
          - SECRET_KEY=${SECRET_KEY:-4wHY2Cp5`4(q%)]cuWxPQJRp5kN?g+`.Xah>%6Fsq6+)R>p_}
          - ALLOWED_HOSTS=*
          - CACHE_DEFAULT=open-notificaties-redis:6379/0
          - CACHE_AXES=open-notificaties-redis:6379/1
          - DB_PORT=5432
          - DB_HOST=open-notificaties-database
          - DB_NAME=notifications
          - DB_USER=notifications
          - DB_PASSWORD=notifications
          - DEBUG=true
          - RABBITMQ_HOST=open-notificaties-rabbitmq
          - PUBLISH_BROKER_URL=redis://open-notificaties-redis:6379/0
          - CELERY_BROKER_URL=redis://open-notificaties-redis:6379/0
          - CELERY_RESULT_BACKEND=redis://open-notificaties-redis:6379/0
          - CELERY_LOGLEVEL=DEBUG
          - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
          - SUBPATH=${SUBPATH:-/}
      command: /celery_worker.sh
      depends_on:
          - open-notificaties-database
          - open-notificaties-rabbitmq
          - open-notificaties-redis

  open-notificaties:
      image: openzaak/open-notificaties:1.4.3
      container_name: open-notificaties-celery
      platform: linux/amd64
      profiles:
          - zgw
      ports:
          - "8002:8000"
      environment: *notificaties-env
      depends_on:
          - open-notificaties-database
          - open-notificaties-rabbitmq
          - open-notificaties-redis

  open-notificaties-database:
      image: postgres:13.5  # open-notificaties doesn't work with postgres 14.
      container_name: open-notificaties-database
      profiles:
          - zgw
      ports:
          - "54319:5432"
      environment:
          - POSTGRES_USER=${DB_USER:-notifications}
          - POSTGRES_PASSWORD=${DB_PASSWORD:-notifications}
          - POSTGRES_DB=notifications
      volumes:
          - ./imports/open-notificaties:/docker-entrypoint-initdb.d

  open-notificaties-redis:
      image: redis:6.2.6
      container_name: open-notificaties-redis
      profiles:
          - zgw

  open-forms-database:
      image: postgres:14.1
      container_name: open-forms-database
      profiles:
          - openformulieren
      ports:
          - "54322:5432"
      environment:
          - POSTGRES_USER=${DB_USER:-openforms}
          - POSTGRES_PASSWORD=${DB_PASSWORD:-openforms}
      volumes:
          - ./imports/open-formulieren:/docker-entrypoint-initdb.d

  open-forms-redis:
      image: redis:6.2.6
      container_name: open-forms-redis
      profiles:
          - openformulieren

  open-forms-web:
      image: openformulieren/open-forms:2.0.3
      container_name: open-forms-web
      platform: linux/amd64
      profiles:
          - openformulieren
      environment: &web_env
          - CORS_ALLOW_ALL_ORIGINS=true
          - DJANGO_SETTINGS_MODULE=openforms.conf.docker
          - SECRET_KEY=${SECRET_KEY:-@r0w-0(&apjfde5fl6h23!vn)r1ldkp1c_d2#!$$did4z5hun4a}
          - DB_NAME=openforms
          - DB_USER=openforms
          - DB_PASSWORD=openforms
          - DB_HOST=open-forms-database
          - CACHE_DEFAULT=open-forms-redis:6379/0
          - CACHE_AXES=open-forms-redis:6379/0
          - ALLOWED_HOSTS=*
          - CELERY_BROKER_URL=redis://open-forms-redis:6379/0
          - CELERY_RESULT_BACKEND=redis://open-forms-redis:6379/0
          - CELERY_LOGLEVEL=DEBUG
          - OPENFORMS_LOCATION_CLIENT=${OPENFORMS_LOCATION_CLIENT:-openforms.contrib.bag.client.BAGClient}
          # Needed for Celery Flower to match the TIME_ZONE configured in the
          # settings used by workers and beat containers.
          - TZ=Europe/Amsterdam
          - TWO_FACTOR_FORCE_OTP_ADMIN=False
          - TWO_FACTOR_PATCH_ADMIN=False
      volumes:
          - ./imports/open-formulieren/private_media:/app/private_media
      ports:
          - "8003:8000"
      depends_on:
          - open-forms-database

  open-forms-celery:
      image: openformulieren/open-forms:2.0.3
      container_name: open-forms-celery
      platform: linux/amd64
      profiles:
          - openformulieren
      environment: *web_env
      command: /celery_worker.sh
      volumes:
          - ./imports/open-formulieren/private_media:/app/private_media
      depends_on:
          - open-forms-database
          - open-forms-redis

  open-forms-celery-beat:
      image: openformulieren/open-forms:2.0.3
      container_name: open-forms-celery-beat
      platform: linux/amd64
      profiles:
          - openformulieren
      environment: *web_env
      command: /celery_beat.sh
      depends_on:
          - open-forms-database
          - open-forms-redis

  open-forms-celery-flower:
      image: mher/flower:0.9.7
      container_name: open-forms-celery-flower
      platform: linux/amd64
      profiles:
          - openformulieren
      environment: *web_env
      ports:
          - "5555:5555"
      depends_on:
          - open-forms-redis
          - open-forms-celery

  open-forms-busybox:
      image: busybox:1.34.1
      container_name: open-forms-busybox
      profiles:
          - openformulieren
      command: /bin/chown -R 1000 /private_media
      volumes:
          - ./imports/open-formulieren/private_media:/private_media

  open-klant:
      image: maykinmedia/open-klant:latest
      container_name: open-klant
      platform: linux/amd64
      profiles:
          - openklantv1
      environment:
          - DJANGO_SETTINGS_MODULE=openklant.conf.docker
          - SECRET_KEY=${SECRET_KEY:-django-insecure-$$8s@b*ds4t84-q_2#c0j0506@!l2q6r5_pq5e!vm^_9c*#^66b}
          - DB_NAME=openklant
          - DB_USER=openklant
          - DB_PASSWORD=openklant
          - DB_HOST=open-klant-database
          - CACHE_DEFAULT=open-klant-redis:6379/0
          - CACHE_AXES=open-klant-redis:6379/0
          - ALLOWED_HOSTS=*
      ports:
          - "8006:8000"
      depends_on:
          - open-klant-database

  open-klant-database:
      image: postgres:14.1
      container_name: open-klant-database
      profiles:
          - openklantv1
      ports:
          - "54323:5432"
      environment:
          - POSTGRES_USER=${DB_USER:-openklant}
          - POSTGRES_PASSWORD=${DB_PASSWORD:-openklant}
      volumes:
          - ./imports/open-klanten:/docker-entrypoint-initdb.d

  open-klant-redis:
      image: redis:6.2.6
      container_name: open-klant-redis
      profiles:
          - openklantv1

volumes:
  gzac-database-data:
  gzac-database-data-mysql:
